substitutions:
  name: "energymonitor-round-display"
  friendly_name: "Energy Monitor Round Display"
  # Power ranges for consumption arc
  power_min: "-900"
  power_low: "0"
  power_medium: "500"
  power_high: "1100"
  power_max: "3000"
  power_extreme: "9000"
   # Solar ranges for production arc
  solar_min: "0"
  solar_low: "100"
  solar_medium: "300"
  solar_high: "500"
  solar_max: "1200"


esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

logger:
  level: INFO

api:

ota:
  - platform: esphome

improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

sensor:
  - platform: homeassistant
    id: housePower
    entity_id: sensor.house_power_channel_1_power
    internal: true
    filters:
      - or:
          - delta: 1
          - timeout: { timeout: 5min, value: 0 }
      - multiply: 1
    on_value:
      then:
        - script.execute: update_display

  - platform: homeassistant
    id: solarPower
    entity_id: sensor.production_solaire
    internal: true
    filters:
      - or:
          - delta: 0.5
          - timeout: { timeout: 90min, value: 0 }
    on_value:
      then:
        - script.execute: update_display

  - platform: homeassistant
    id: cost_today
    entity_id: sensor.prix_journalier_total
    internal: true
    filters:
      - or:
          - delta: 1
          - timeout: { timeout: 150min, value: 0 }

  - platform: homeassistant
    id: kwh_month
    entity_id: sensor.kwh_hittil_mnd
    internal: true
    filters:
      - or:
          - delta: 0.5
          - timeout: { timeout: 90min, value: 0 }

  - platform: homeassistant
    id: cost_month
    entity_id: sensor.prix_mois_total
    internal: true
    filters:
      - or:
          - delta: 1
          - timeout: { timeout: 150min, value: 0 }

  - platform: template
    id: production_arc_angle
    name: "Production Arc Angle"
    internal: true
    update_interval: never

  - platform: template
    id: consumption_arc_angle
    name: "Consumption Arc Angle"
    internal: true
    update_interval: never

spi:
  clk_pin: GPIO6
  mosi_pin: GPIO7

output:
  - platform: ledc
    pin: GPIO3
    id: backlight_output

light:
  - platform: monochromatic
    output: backlight_output
    name: LCD Backlight
    id: back_light
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_off:
      then:
        lvgl.pause

display:
  - platform: ili9xxx
    invert_colors: true
    rotation: 0
    id: lcd_display
    model: gc9a01a
    data_rate: 80MHz
    cs_pin: GPIO10
    dc_pin: GPIO2
    dimensions:
      width: 240
      height: 240
    update_interval: never
    auto_clear_enabled: false

script:
  - id: update_display
    mode: restart 
    then:
      - lvgl.label.update:
          id: consumption_text
          text: !lambda |-
            int value = id(housePower).state;
            if (value < 0) {
              return (std::string("-") + std::to_string(std::abs(value)) + " W").c_str();
            } else {
              return (std::to_string(value) + " W").c_str();
            }
      - lvgl.label.update:
          id: production_text
          text: !lambda |-
            return (std::to_string((int)id(solarPower).state) + " W").c_str();
      

  - id: randomize_consumption_arc
    mode: restart
    then:
      - lambda: |-
          //int random_consumption_value = -900 + (rand() % (9000 - (-900) + 1)); // random value between -900 and 9000
          //int random_production_value = rand() % 1101; // random value between 0 and 1100
            
          float power = id(housePower).state;
          float solar = id(solarPower).state;

          //TESTING: Use random values for consumption and production
          //power = random_consumption_value; // Use the random value for testing
          //solar = random_production_value; // Use the random value for testing

          //Update cunsumption arc
          int consumption_value_arc = 0;
          uint32_t consumption_color = 0xFF2626;
          if (power >= ${power_min} && power <= ${power_low}) {
            // Range: -900 to 0, consumption_value_arc: 0 to 20
            float factor = (power - ${power_min}) / (${power_low} - ${power_min});
            consumption_value_arc = 0 + (int)(factor * 20);
            consumption_color = 0x3BFF26;  // Green
          } else if (power > ${power_low} && power <= ${power_medium}) {
            // Range: 0 to 500, consumption_value_arc: 20 to 40
            float factor = (power - ${power_low}) / (${power_medium} - ${power_low});
            consumption_value_arc = 20 + (int)(factor * 20);
            consumption_color = 0xFFFB00;  // Yellow
          } else if (power > ${power_medium} && power <= ${power_high}) {
            // Range: 500 to 1100, consumption_value_arc: 40 to 60
            float factor = (power - ${power_medium}) / (${power_high} - ${power_medium});
            consumption_value_arc = 40 + (int)(factor * 20);
            consumption_color = 0xFFA600;  // Orange
          } else if (power > ${power_high} && power <= ${power_max}) {
            // Range: 1101 to 3000, consumption_value_arc: 60 to 80
            float factor = (power - ${power_high}) / (${power_max} - ${power_high});
            consumption_value_arc = 60 + (int)(factor * 20);
            consumption_color = 0xFF3C00;  // Red-orange
          } else if (power > ${power_max} && power <= ${power_extreme}) {
            // Range: 3001 to 9000, consumption_value_arc: 80 to 100
            float factor = (power - ${power_max}) / (${power_extreme} - ${power_max});
            consumption_value_arc = 80 + (int)(factor * 20);
            consumption_color = 0xFF0000;  // Red
          }
          id(arc_consumption_value) = consumption_value_arc;
          id(arc_consumption_color) = consumption_color;
          id(consumption_value) = power;

          //Update production arc
          int production_value_arc = 0;
          uint32_t production_color = 0xFFFB00;
          if (solar >= ${solar_min} && solar <= ${solar_low}) {
            // 0-100W => 0-10, color 0xFFFB00
            float factor = (solar - 0) / 100.0f;
            production_value_arc = 0 + (int)(factor * 10);
            production_color = 0xFFFB00;
          } else if (solar > ${solar_low} && solar <= ${solar_medium}) {
            // 101-300W => 10-30, color 0xBFFF00
            float factor = (solar - 100) / 200.0f;
            production_value_arc = 10 + (int)(factor * 20);
            production_color = 0xBFFF00;
          } else if (solar > ${solar_medium} && solar <= ${solar_high}) {
            // 301-500W => 30-50, color 0x95FF00
            float factor = (solar - 300) / 200.0f;
            production_value_arc = 30 + (int)(factor * 20);
            production_color = 0x95FF00;
          } else if (solar > ${solar_high} && solar <= ${solar_max}) {
            // 501-1100W => 50-100, color 0x26FF4D
            float factor = (solar - 500) / 600.0f;
            production_value_arc = 50 + (int)(factor * 50);
            production_color = 0x26FF4D;
          }

          id(arc_production_value) = production_value_arc;
          id(arc_production_color) = production_color;
          id(production_value) = solar;

      - lvgl.label.update:
          id: consumption_text
          text: !lambda 'return (std::to_string(id(consumption_value)) + " W").c_str();'

      - lvgl.label.update:
          id: production_text
          text: !lambda 'return (std::to_string(id(production_value)) + " W").c_str();'

      - lvgl.arc.update:
          id: consumption_arc
          value: !lambda 'return id(arc_consumption_value);'
          knob:
            bg_color: !lambda 'return lv_color_hex(id(arc_consumption_color));'
          indicator:
            arc_color: !lambda 'return lv_color_hex(id(arc_consumption_color));'

      - lvgl.arc.update:
          id: production_arc
          value: !lambda 'return id(arc_production_value);'
          knob:
            bg_color: !lambda 'return lv_color_hex(id(arc_production_color));'
          indicator:
            arc_color: !lambda 'return lv_color_hex(id(arc_production_color));'

globals:
  - id: arc_consumption_value
    type: int
    restore_value: no
    initial_value: '75'
  - id: arc_production_value
    type: int
    restore_value: no
    initial_value: '75'
  - id: arc_consumption_color
    type: uint32_t
    restore_value: no
    initial_value: '0xFF2626'
  - id: arc_production_color
    type: uint32_t
    restore_value: no
    initial_value: '0xFF2626'
  - id: consumption_value
    type: int
    restore_value: no
    initial_value: '0'
  - id: production_value
    type: int
    restore_value: no
    initial_value: '0'

interval:
  - interval: 2s
    then:
      - script.execute: randomize_consumption_arc

image:
  - file: "icons/electrical_services.png"
    id: consumption_icon
    type: RGB565
    resize: 24x24
  - file: "icons/solar_power.png"
    id: solar_icon
    type: RGB565
    resize: 24x24


lvgl:
  log_level: WARN
  color_depth: 16
  bg_color: 0x000000
  border_width: 0
  outline_width: 0
  shadow_width: 0
  text_font: unscii_16
  align: center
  border_color: 0x000000
  pages:
    - id: main_page
      widgets:
        - arc:
            id: consumption_arc
            x: 0
            y: 0
            width: 220
            height: 220
            align: center
            start_angle: 160
            end_angle: 20
            bg_opa: 0
            line_width: 10
            arc_color: 0x333333
            adjustable: true
            value: 75
            mode: NORMAL
            #bg_color: 0xFF0000
        - arc:
            id: production_arc
            x: 0
            y: 0
            width: 220
            height: 220
            align: center
            start_angle: 30
            end_angle: 150
            bg_opa: 0
            line_width: 10
            arc_color: 0x333333
            adjustable: true
            value: 75
            mode: REVERSE
        - label:
            id: consumption_text
            x: 0
            y: -50
            text: "0 W"
            text_font: MONTSERRAT_30
            text_color: 0xFF2626
            align: center
        - label:
            id: production_text
            x: 0
            y: 50
            text: "0 W"
            text_font: MONTSERRAT_24
            text_color: 0x26FF4D
            align: center
        - image:
            id: house_icon
            x: 0
            y: -80
            src: consumption_icon
            align: center
        - image:
            id: production_icon
            x: 0
            y: 80
            src: solar_icon
            align: center
        - obj:
            id: left_eye
            x: 60
            y: 95
            width: 50
            height: 50
            radius: 20
            bg_color: 0x00FFFF
            border_width: 0
        - obj:
            id: right_eye
            x: 130
            y: 95
            width: 50
            height: 50
            radius: 20
            bg_color: 0x00FFFF
            border_width: 0

